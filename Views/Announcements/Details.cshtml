@model HomeownersAssociation.Models.Announcement

@{
    ViewData["Title"] = "Announcement Details";
}



<div class="container py-5 lora-body">
    <div class="mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="display-4 text-dark fw-bold oswald-heading">@Model.Title</h1>
            <span class="badge @GetPriorityBadgeClass(Model.Priority) p-2" style="letter-spacing: 2px;">@Model.Priority</span>
        </div>
    </div>
    

    <div class="card mb-4 shadow @GetPriorityClass(Model.Priority)" style="border-width: 2px;">
        <div class="card-body">
            <div class="d-flex justify-content-between mb-4 oswald-heading ">
                @Html.Raw(Model.Content)
                
            </div>

            @if (!string.IsNullOrEmpty(Model.AttachmentUrl))
            {
                <div class="mb-3 p-3 bg-light rounded">
                    <h5><i class="bi bi-paperclip"></i> Attachment</h5>
                    <a href="@Model.AttachmentUrl" class="btn btn-outline-primary" target="_blank">
                        <i class="bi bi-download"></i> Download Attachment
                    </a>
                </div>
            }

            <div class="row mt-4">
                <div class="col-md-6    ">
                    <div class="card shadow-sm">
                        <div class="card-header oswald-heading">
                            <h5 class="mb-0">Announcement Information</h5>
                        </div>
                        <div class="card-body">
                            <dl class="row" style="font-size: 0.8rem;">
                                <dt class="col-sm-4">Posted By</dt>
                                <dd class="col-sm-8">@(Model.Author?.FirstName + " " + Model.Author?.LastName ?? "Unknown")</dd>

                                <dt class="col-sm-4">Date Posted</dt>
                                <dd class="col-sm-8">@Model.DatePosted.ToString("MMMM dd, yyyy hh:mm tt")</dd>

                                @if (Model.ExpiryDate.HasValue)
                                {
                                    <dt class="col-sm-4">Expiry Date</dt>
                                    <dd class="col-sm-8">@Model.ExpiryDate.Value.ToString("MMMM dd, yyyy")</dd>
                                }

                                <dt class="col-sm-4">Status</dt>
                                <dd class="col-sm-8">
                                    @if (Model.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (User.IsInRole("Admin"))
        {
            <div class="card-footer">
                <div class="d-flex justify-content-end">
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary me-2">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">
                        <i class="bi bi-trash"></i> Delete
                    </a>
                </div>
            </div>
        }
    </div>
    <div class="mb-3">
        <a asp-action="Index" class="btn btn-dark">
            <i class="bi bi-arrow-left"></i> Back to Announcements
        </a>
    </div>
</div>

@functions {
    string GetPriorityClass(AnnouncementPriority priority)
    {
        return priority switch
        {
            AnnouncementPriority.Urgent => "border-dark",
            AnnouncementPriority.High => "border-dark",
            AnnouncementPriority.Normal => "border-dark",
            AnnouncementPriority.Low => "border-dark",
            _ => "border-dark"
        };
    }

    string GetPriorityBadgeClass(AnnouncementPriority priority)
    {
        return priority switch
        {
            AnnouncementPriority.Urgent => "bg-danger",
            AnnouncementPriority.High => "bg-warning text-dark",
            AnnouncementPriority.Normal => "bg-primary",
            AnnouncementPriority.Low => "bg-secondary",
            _ => "bg-primary"
        };
    }
}